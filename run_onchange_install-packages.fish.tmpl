#!/usr/bin/env fish

function log -a log_level
    set -f log_date (date "+%FT%T%z")

    if test $log_level = trace
        set_color blue
    else if test $log_level = info
        set_color green
    else if test $log_level = warn
        set_color yellow
    else if test $log_level = error
        set_color red
    end

    if test $log_level = error
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages-error.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2
    else if test $log_level = warn
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2
    else
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"'
    end

    set_color normal
end

function run_cmd
    set -l cmd $argv
    log trace "Running command $cmd"
    eval "$cmd" | read -z out 2>| read -z err 2>&1
    if test $status -eq 1
        log error $out $err
    else if test -n $err
        log warn $out $err
    else
        log info $out $err
    end
end

log info "========================= RUNNING CONFIGURATION SCRIPT ========================="

source "$HOME/.config/fish/config.fish"

{{ if eq .chezmoi.os "darwin" -}}
log info "=== CONFIGURING HOMEBREW ==="

run_cmd rm -f "$HOME/Brewfile"
run_cmd touch "$HOME/Brewfile"

{{ range .packages.darwin.taps -}}
echo 'tap {{ . | quote }}' >>"$HOME/Brewfile"
{{ end -}}
{{ range .packages.darwin.brews -}}
echo 'brew {{ . | quote }}' >>"$HOME/Brewfile"
{{ end -}}
{{ range .packages.darwin.casks -}}
echo 'cask {{ . | quote }}' >>"$HOME/Brewfile"
{{ end -}}
{{ range .packages.darwin.mas -}}
echo 'mas {{ .name | quote }}, id: {{ .id }}' >>"$HOME/Brewfile"
{{ end -}}

run_cmd brew bundle --file="$HOME/Brewfile"

log info "=== HOMEBREW CONFIGURED ==="
{{ end -}}

{{ if eq .chezmoi.os "linux" -}}
log info "=== CONFIGURING LINUX PACKAGES ==="

run_cmd sudo dnf install -y{{ range .packages.rpms }} {{ . }}{{ end }} git

log info "=== LINUX PACKAGES CONFIGURED ==="

log info "=== CONFIGURING FONTS ==="

run_cmd mkdir -p ~/.local/share/fonts

{{ range .packages.fonts -}}
if not test -d "$HOME/.local/share/fonts/{{ . }}"
    log trace "Adding font {{ . }}"
    run_cmd curl -fsSL -o "$HOME/.local/share/fonts/{{ . }}.tar.xz" "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/{{ . }}.tar.xz"
    run_cmd mkdir "$HOME/.local/share/fonts/{{ . }}/"
    run_cmd tar -xf "$HOME/.local/share/fonts/{{ . }}.tar.xz" -C "$HOME/.local/share/fonts/{{ . }}/"
    run_cmd rm "$HOME/.local/share/fonts/{{ . }}.tar.xz"
else
    log trace "Font already exists {{ . }}"
end

{{ end }}
run_cmd fc-cache -f -v

log info "=== FONTS CONFIGURED ==="

log info "=== CONFIGURING FLATPAK ==="

run_cmd flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
{{ range .packages.flatpaks }}
run_cmd flatpak install -y flathub {{ . }}
{{ end }}

log info "=== FLATPAK CONFIGURED ==="

{{ end }}
log trace "Going home - $HOME"
cd $HOME

log info "=== CONFIGURING ASDF ==="

{{ range .packages.asdf }}
run_cmd asdf plugin add {{ . }}
run_cmd asdf install {{ . }} latest
run_cmd asdf set {{ . }} latest
{{ end }}

{{ range .packages.asdf_version }}
run_cmd asdf plugin add {{ .name }}
run_cmd asdf install {{ .name }} {{ .version }}
run_cmd asdf set {{ .name }} {{ .version }}
{{ end }}

run_cmd asdf reshim

log info "=== ASDF CONFIGURED ==="

function _test_var -a var -a val
    if test -z $val
        set _cwd (pwd)
        log error "No version set for $var in $_cwd"
        set --erase _cwd
        exit 1
    end
end

log info "=== CONFIGURING NEOVIM ==="

set -g _python_path (asdf which python)
_test_var Python $_python_path
set -g _ruby_path (asdf which ruby)
_test_var Ruby $_ruby_path
set -g _node_path (asdf which node)
_test_var Node $_node_path
set -g _perl_path (asdf which perl)
_test_var Perl $_perl_path
set -g _npm_path (asdf which npm)
_test_var NPM $_npm_path
set -g _cpan_path (asdf which cpan)
_test_var Cpan $_cpan_path
set -g _pip_path (asdf which pip)
_test_var pip $_pip_path
set -g _gem_path (asdf which gem)
_test_var gem $_gem_path
set -g _lua_path (asdf which lua)
_test_var lua $_lua_path

eval "$_npm_path i -g neovim"

if not test -e /usr/local/bin/composer
    log info "PHP Composer not installed"
    run_cmd php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    run_cmd php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'.PHP_EOL; } else { echo 'Installer corrupt'.PHP_EOL; unlink('composer-setup.php'); exit(1); }"
    run_cmd php composer-setup.php
    run_cmd php -r "unlink('composer-setup.php');"

    if test -d /usr/local/bin
        log warn "/usr/local/bin does not exist"
        run_cmd sudo mkdir -p /usr/local/bin
        run_cmd fish_add_path /usr/local/bin
    end

    run_cmd sudo mv composer.phar /usr/local/bin/composer
else
    run_cmd trace "PHP Composer already installed"
end

if not test -e /usr/local/bin/luarocks
    log info "LuaRocks not installed"
    run_cmd wget https://luarocks.org/releases/luarocks-3.11.1.tar.gz
    run_cmd tar zxpf luarocks-3.11.1.tar.gz
    cd luarocks-3.11.1
    run_cmd ./configure --with-lua="$(dirname (dirname (asdf which lua)))" --prefix=$HOME/.local
    run_cmd make
    run_cmd make install
    run_cmd luarocks install luasocket
else
    log trace "LuaRocks already installed"
end

if not test -e $HOME/.asdf/shims/cpanm
    log trace "running command: $_cpan_path App::cpanminus"
    eval "echo 'yes' | $_cpan_path App::cpanminus"
    run_cmd asdf reshim
    set _cpanm_path (asdf which cpanm)
    run_cmd $_cpanm_path Neovim::Ext
    run_cmd asdf reshim
end

run_cmd $_pip_path install --upgrade pip
run_cmd $_pip_path install pynvim

run_cmd $_gem_path install neovim

run_cmd rm -f ~/.config/nvim/lua/options.lua
run_cmd touch ~/.config/nvim/lua/options.lua
echo -e "vim.g.python3_host_prog = '$_python_path'" >>~/.config/nvim/lua/options.lua
echo -e "vim.g.ruby_host_prog = '$_ruby_path'" >>~/.config/nvim/lua/options.lua
echo -e "vim.g.node_host_prog = '$_node_path'" >>~/.config/nvim/lua/options.lua
echo -e "vim.g.perl_host_prog = '$_perl_path'" >>~/.config/nvim/lua/options.lua

log info "=== NEOVIM CONFIGURED ==="

log info "========================= CONFIGURATION COMPLETE ========================="

# vim: set ft=fish:
