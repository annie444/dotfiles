#!/usr/bin/env -S fish --login

function log -a log_level
    set -f log_date (date "+%FT%T%z")

    if test $log_level = trace
        set_color blue
    else if test $log_level = info
        set_color green
    else if test $log_level = warn
        set_color yellow
    else if test $log_level = error
        set_color red
    end

    if test $log_level = error
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages-error.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2
    else if test $log_level = warn
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2
    else
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"'
    end

    set_color normal
end

log info "========================= RUNNING CONFIGURATION SCRIPT ========================="

source "$HOME/.config/fish/config.fish"

log info "=== RUNNING INSTALLATION SCRIPTS ==="

{{ range .packages.scripts -}}
log info "Running script {{ . }}"
curl --proto '=https' --tlsv1.2 -sSfL {{ . }} | bash
{{ end -}}

source "$HOME/.cargo/env.fish"

rustup toolchain install stable --profile default --component rust-src,clippy,rust-analyzer,rust-docs,rust-std,rustfmt
rustup defualt stable
rustup update

log info "=== INSTALLATION SCRIPTS COMPLETED ==="

log info "=== INSTALLING CARGO CRATES ==="

{{ range .packages.crates -}}
cargo install {{ . }}
{{ end -}}

log info "=== CARGO CRATES INSTALLED ==="

function run_cmd
    set -l cmd $argv
    log trace "Running command $cmd"
    eval (pipe -s out err -- $cmd)
    if test -n "$err"
        log error $err
    end
    if test -n "$out"
        log info $out
    end
end

{{ if eq .chezmoi.os "darwin" -}}
log info "=== CONFIGURING HOMEBREW ==="

run_cmd rm -f "$HOME/Brewfile"
run_cmd touch "$HOME/Brewfile"

{{ range .packages.darwin.taps -}}
echo 'tap {{ . | quote }}' >>"$HOME/Brewfile"
{{ end -}}
{{ range .packages.darwin.brews -}}
echo 'brew {{ . | quote }}' >>"$HOME/Brewfile"
{{ end -}}
{{ range .packages.darwin.casks -}}
echo 'cask {{ . | quote }}' >>"$HOME/Brewfile"
{{ end -}}
{{ range .packages.darwin.mas -}}
echo 'mas {{ .name | quote }}, id: {{ .id }}' >>"$HOME/Brewfile"
{{ end -}}

run_cmd brew bundle --file="$HOME/Brewfile"

log info "=== HOMEBREW CONFIGURED ==="
{{ end -}}

{{ if eq .chezmoi.os "linux" -}}
log info "=== CONFIGURING LINUX PACKAGES ==="

log trace "Installing dnf plugins"

run_cmd sudo dnf install -y dnf5-plugins

log trace "Enabling the Cisco repository"

run_cmd sudo dnf config-manager setopt fedora-cisco-openh264.enabled=1

log trace "Enabling the RPM Fusion repositories"

set -gx fedora_version (rpm -E %fedora)
run_cmd sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$fedora_version.noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$fedora_version.noarch.rpm

log trace "Enabling the Terra repository"

run_cmd sudo dnf install --nogpgcheck --repofrompath 'terra,https://repos.fyralabs.com/terra$releasever' terra-release

log trace "Adding RPM repositories"

{{ range .packages.rpm_repos -}}
run_cmd sudo dnf config-manager addrepo --from-repofile={{ . }}
{{ end -}}

log trace "Installing COPR repositories"

{{ range .packages.copr_repos -}}
run_cmd sudo dnf copr enable -y {{ . }}
{{ end -}}

run_cmd sudo dnf install -y{{ range .packages.rpms }} {{ . }}{{ end }} git

log info "=== LINUX PACKAGES CONFIGURED ==="

log info "=== CONFIGURING FONTS ==="

run_cmd mkdir -p ~/.local/share/fonts

{{ range .packages.fonts -}}
if not test -d "$HOME/.local/share/fonts/{{ . }}"
    log trace "Adding font {{ . }}"
    run_cmd curl -fsSL -o "$HOME/.local/share/fonts/{{ . }}.tar.xz" "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/{{ . }}.tar.xz"
    run_cmd mkdir "$HOME/.local/share/fonts/{{ . }}/"
    run_cmd tar -xf "$HOME/.local/share/fonts/{{ . }}.tar.xz" -C "$HOME/.local/share/fonts/{{ . }}/"
    run_cmd rm "$HOME/.local/share/fonts/{{ . }}.tar.xz"
else
    log trace "Font already exists {{ . }}"
end

{{ end }}
run_cmd fc-cache -f -v

log info "=== FONTS CONFIGURED ==="

log info "=== CONFIGURING FLATPAK ==="

run_cmd flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
{{ range .packages.flatpaks }}
run_cmd flatpak install -y flathub {{ . }}
{{ end }}

log info "=== FLATPAK CONFIGURED ==="

{{ end }}
log trace "Going home - $HOME"

log info "=== CONFIGURING ASDF ==="

set -gx manual_version_packages delta python lazygit ruby
set -gx linux_only_packages imagemagick cmake php thrift

function asdf_install -a package -a ver -a pkg_cmd
    if test "$package" = ruby
        log trace "Setting CFLAGS for ruby"
        set -gx CFLAGS -Wall
    end
    if contains $package $manual_version_packages
        set -f ver (asdf list all $package | \
		rg '^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$' | \
		sort -V | \
		tail -n 1)
    end
    if contains $package $linux_only_packages
        if test "$(uname -s)" != Linux
            return 0
        end
    end
    run_cmd asdf plugin add $package
    run_cmd asdf install $package $ver
    run_cmd asdf set --home $package $ver
    asdf reshim
    set package_path (asdf which "$pkg_cmd")
    log trace "Package $package is at path $package_path"
    if test -z "$package_path"
        for v in (asdf list $package)
            set local_ver (echo $v | sed -e 's/*//')
            run_cmd asdf uninstall $package $local_ver
        end
        asdf reshim
        asdf_install $package $ver $pkg_cmd
    end
    if test "$package" = ruby
        log trace "Erasing CFLAGS"
        set --erase CFLAGS
    end
end

{{ range .packages.asdf }}
asdf_install {{ .name }} latest {{ .cmd }}
{{ end }}

asdf reshim

log info "=== ASDF CONFIGURED ==="

log info "=== RUNNING SECONDARY INSTALLATION SCRIPTS ==="

{{ range .packages.scripts_after -}}
log info "Running script {{ . }}"
run_cmd curl --proto '=https' --tlsv1.2 -sSfL {{ . }} | bash
{{ end -}}

log info "=== SECONDARY INSTALLATION SCRIPTS COMPLETED ==="

asdf reshim

log info "=== RUNNING PYTHON SCRIPTS ==="

{{ range .packages.python_scripts -}}
log info "Running script {{ . }}"
run_cmd curl --proto '=https' --tlsv1.2 -sSfL {{ . }} | python3 -
{{ end -}}

log info "=== PYTHON SCRIPTS COMPLETED ==="

asdf reshim

log info "=== INSTALLING GO PACKAGES ==="

{{ range .packages.gopkgs -}}
run_cmd go install {{ . | quote }}
{{ end -}}

log info "=== GO PACKAGES INSTALLED ==="

asdf reshim

function _test_var -a var -a val
    if test -z $val
        log error "No version set for $var in $(pwd)"
        return 1
    end
end

log info "=== CONFIGURING NEOVIM ==="

set -g _python_path (asdf which python)
_test_var Python $_python_path
set -g _ruby_path (asdf which ruby)
_test_var Ruby $_ruby_path
set -g _node_path (asdf which node)
_test_var Node $_node_path
set -g _perl_path (asdf which perl)
_test_var Perl $_perl_path
set -g _npm_path (asdf which npm)
_test_var NPM $_npm_path
set -g _cpan_path (asdf which cpan)
_test_var Cpan $_cpan_path
set -g _pip_path (asdf which pip)
_test_var pip $_pip_path
set -g _gem_path (asdf which gem)
_test_var gem $_gem_path
set -g _lua_path (asdf which lua)
_test_var lua $_lua_path

eval "$_npm_path i -g neovim"

if not test -e /usr/local/bin/luarocks
    log info "LuaRocks not installed"
    run_cmd wget https://luarocks.org/releases/luarocks-3.11.1.tar.gz
    run_cmd tar zxpf luarocks-3.11.1.tar.gz
    cd luarocks-3.11.1
    run_cmd ./configure --with-lua="$(dirname (dirname (asdf which lua)))" --prefix=$HOME/.local
    run_cmd make
    run_cmd make install
    run_cmd luarocks install luasocket
    cd ..
    run_cmd rm -rf luarocks-3.11.1
    run_cmd rm -f luarocks-3.11.1.tar.gz
else
    log trace "LuaRocks already installed"
end

if not test -e $HOME/.asdf/shims/cpanm
    log trace "running command: $_cpan_path App::cpanminus"
    eval "echo 'yes' | $_cpan_path App::cpanminus"
    run_cmd asdf reshim
    set _cpanm_path (asdf which cpanm)
    run_cmd $_cpanm_path Neovim::Ext
    run_cmd asdf reshim
end

run_cmd $_pip_path install --upgrade pip
run_cmd $_pip_path install pynvim

run_cmd $_gem_path install neovim

run_cmd rm -f ~/.config/nvim/lua/options.lua
run_cmd touch ~/.config/nvim/lua/options.lua
echo -e "vim.g.python3_host_prog = '$_python_path'" >>~/.config/nvim/lua/options.lua
echo -e "vim.g.ruby_host_prog = '$_ruby_path'" >>~/.config/nvim/lua/options.lua
echo -e "vim.g.node_host_prog = '$_node_path'" >>~/.config/nvim/lua/options.lua
echo -e "vim.g.perl_host_prog = '$_perl_path'" >>~/.config/nvim/lua/options.lua

log info "=== NEOVIM CONFIGURED ==="

log info "========================= CONFIGURATION COMPLETE ========================="

# vim: set ft=fish:
