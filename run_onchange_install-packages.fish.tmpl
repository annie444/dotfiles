#!/usr/bin/env -S fish --login

function log -a log_level
    set -f log_date (date "+%FT%T%z")

    if test $log_level = trace
        set_color blue
    else if test $log_level = info
        set_color green
    else if test $log_level = warn
        set_color yellow
    else if test $log_level = error
        set_color red
    end

    if test $log_level = error
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages-error.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2
    else if test $log_level = warn
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2 &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' >&2
    else
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"' &>>$HOME/.chezmoi-install-packages.log
        echo -e "timestamp="$log_date "level="$log_level 'msg="'$argv[2..-1]'"'
    end

    set_color normal
end

log info "========================= RUNNING CONFIGURATION SCRIPT ========================="

if test -f "$HOME/.config/fish/config.fish"
    log info "Sourcing existing fish config"
    source "$HOME/.config/fish/config.fish"
end

log info "=== RUNNING INSTALLATION SCRIPTS ==="

log info "Installing rust"
curl --proto '=https' --tlsv1.2 -sSfL https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile default --component rust-src,clippy,rust-analyzer,rust-docs,rust-std,rustfmt

set -gx CARGO_HOME $HOME/.cargo
set -gx PATH $CARGO_HOME/bin $PATH

source "$HOME/.cargo/env.fish"

rustup update

log info "=== INSTALLATION SCRIPTS COMPLETED ==="

log info "=== INSTALLING CARGO CRATES ==="

{{ range .packages.crates -}}
{{- if kindIs "string" . }}
cargo install {{ . }}
{{- else -}}
{{- if hasKey . "name" -}}
{{- if hasKey . "git" }}
cargo install {{ .name }} --git {{ .git }}
{{- else -}}
cargo install {{ .name }}
{{ end -}}
{{ end -}}
{{ end -}}
{{ end }}

log info "=== CARGO CRATES INSTALLED ==="

function run_cmd
    set -l cmd $argv
    log trace "Running command $cmd"
    eval (pipe -s out err -- $cmd)
    if test -n "$err"
        log error $err
    end
    if test -n "$out"
        log info $out
    end
end

{{ if eq .chezmoi.os "darwin" -}}
log info "=== CONFIGURING HOMEBREW ==="

run_cmd rm -f "$HOME/Brewfile"

begin
    {{ range .packages.macos.taps -}}
    echo 'tap {{ . | quote }}'
    {{ end -}}
    {{ range .packages.macos.brews -}}
    echo 'brew {{ . | quote }}'
    {{ end -}}
    {{ range .packages.macos.casks -}}
    echo 'cask {{ . | quote }}'
    {{ end -}}
    {{ range .packages.macos.mas -}}
    echo 'mas {{ .name | quote }}, id: {{ .id }}'
    {{ end -}}
end >"$HOME/Brewfile"

run_cmd brew bundle --file="$HOME/Brewfile"

log info "=== HOMEBREW CONFIGURED ==="
{{ end -}}

{{ if eq .chezmoi.os "linux" -}}
log info "=== CONFIGURING LINUX PACKAGES ==="

log trace "Installing dnf plugins"

run_cmd sudo dnf install -y dnf5-plugins

log trace "Enabling the Cisco repository"

run_cmd sudo dnf config-manager setopt fedora-cisco-openh264.enabled=1

log trace "Enabling the RPM Fusion repositories"

set -gx fedora_version (rpm -E %fedora)
run_cmd sudo dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$fedora_version.noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$fedora_version.noarch.rpm

log trace "Enabling the Terra repository"

run_cmd sudo dnf install -y --nogpgcheck --repofrompath 'terra,https://repos.fyralabs.com/terra$releasever' terra-release

log trace "Adding RPM repository files"

{{ range .packages.rpm.repos -}}
run_cmd sudo dnf config-manager addrepo --from-repofile={{ . }}
{{- end }}

log trace "Installing COPR repositories"

{{ range .packages.rpm.coprs -}}
run_cmd sudo dnf copr enable -y {{ . }}
{{- end }}

run_cmd sudo dnf install -y \
    {{ range .packages.rpm.rpms -}}
    {{ . }} \
    {{ end -}}
    git

log info "=== LINUX PACKAGES CONFIGURED ==="

log info "=== CONFIGURING FONTS ==="

run_cmd mkdir -p ~/.local/share/fonts

{{ range .packages.linux.fonts -}}
if not test -d "$HOME/.local/share/fonts/{{ . }}"
    log trace "Adding font {{ . }}"
    run_cmd curl -fsSL -o "$HOME/.local/share/fonts/{{ . }}.tar.xz" "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/{{ . }}.tar.xz"
    run_cmd mkdir "$HOME/.local/share/fonts/{{ . }}/"
    run_cmd tar -xf "$HOME/.local/share/fonts/{{ . }}.tar.xz" -C "$HOME/.local/share/fonts/{{ . }}/"
    run_cmd rm "$HOME/.local/share/fonts/{{ . }}.tar.xz"
else
    log trace "Font already exists {{ . }}"
end
{{ end }}

run_cmd fc-cache -f -v

log info "=== FONTS CONFIGURED ==="

log info "=== CONFIGURING FLATPAK ==="

run_cmd flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
{{ range .packages.linux.flatpaks -}}
run_cmd flatpak install -y flathub {{ . }}
{{ end }}

log info "=== FLATPAK CONFIGURED ==="

log info "=== INSTALLING ASDF ==="

if not command -q asdf &>/dev/null
    set -l asdf_tag (curl -sSL -H "Accept: application/vnd.github+json" "https://api.github.com/repos/asdf-vm/asdf/releases/latest" | jq -r .tag_name)
    if test (uname -m) = x86_64
        set asdf_arch amd64
    else if test (uname -m) = aarch64
        set asdf_arch arm64
    else
        log error "Unsupported architecture: (uname -m)"
        return 1
    end
    wget -qO- https://github.com/asdf-vm/asdf/releases/download/$asdf_tag/asdf-$asdf_tag-linux-$asdf_arch.tar.gz | sudo tar -xzf - -C /usr/bin/
    mkdir -p $HOME/.asdf
end

{{ end -}}

set -gx ASDF_DATA_DIR $HOME/.asdf
set -gx ASDF_CONCURRENCY (nproc)
set -gx ASDF_CONFIG_FILE "$HOME/.asdfrc"
set -gx PATH $ASDF_DATA_DIR/shims $PATH

log info "=== CONFIGURING ASDF ==="

set -gx manual_version_packages python ruby

function asdf_install -a package -a ver -a pkg_cmd
    if test $package = ruby
        log trace "Setting CFLAGS for ruby"
        set -gx CFLAGS -Wall
    end
    if contains $package $manual_version_packages
        set -g pkg_version (asdf list all $package | \
		rg '^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$' | \
		sort -V | \
		tail -n 1)
    else
        set -g pkg_version $ver
    end
    if set -q asdf_install_retries
        if test $asdf_install_retries -gt 3
            log error "Failed to install $package after $asdf_install_retries attempts"
            set --erase asdf_install_retries
            return
        else
            set -g asdf_install_retries (math $asdf_install_retries + 1)
        end
    else
        set -g asdf_install_retries 1
    end
    run_cmd asdf plugin add $package
    run_cmd asdf install $package $pkg_version
    run_cmd asdf set --home $package $pkg_version
    asdf reshim
    set package_path (asdf which "$pkg_cmd")
    log trace "Package $package is at path $package_path"
    if not test -e "$package_path"
        for v in (asdf list $package)
            set local_ver (echo $v | sed -e 's/*//')
            run_cmd asdf uninstall $package $local_ver
        end
        asdf reshim
        asdf_install $package $pkg_version $pkg_cmd
    end
    if test "$package" = ruby
        log trace "Erasing CFLAGS"
        set --erase CFLAGS
    end
    set --erase pkg_version
    set --erase asdf_install_retries
end

{{ range .packages.asdf -}}
{{- if hasKey . "version" }}
asdf_install {{ .name }} {{ .version }} {{ .cmd }}
{{- else -}}
asdf_install {{ .name }} latest {{ .cmd }}
{{ end -}}
{{- end }}

asdf reshim

log info "=== ASDF CONFIGURED ==="

log info "=== INSTALLING SOPS ==="

set -g sops_os (string lower (uname -s))

if test (uname -m) = x86_64
    set -g sops_arch amd64
else if test (uname -m) = arm64
    set -g sops_arch arm64
else if test (uname -m) = aarch64
    set -g sops_arch arm64
else if test (uname -m) = amd64
    set -g sops_arch amd64
else
    log error "Unsupported architecture: $(uname -m)"
    return 1
end

curl -fSsL https://api.github.com/repos/getsops/sops/releases/latest | grep "browser_download_url.*$sops_os.$sops_arch" | head -n 1 | cut -d : -f 2,3 | tr -d \" | xargs -I {} curl -fSsL {} -o $HOME/.local/bin/sops
run_cmd chmod +x $HOME/.local/bin/sops

log info "=== SOPS INSTALLED ==="

log info "=== RUNNING SECONDARY INSTALLATION SCRIPTS ==="

{{ range .packages.scripts -}}
log info "Running script {{ . }}"
if string match -iq -- "*deno*" "{{ . }}"
    curl --proto '=https' --tlsv1.2 -sSfL {{ . }} | sh -s -- -y --no-modify-path
else
    curl --proto '=https' --tlsv1.2 -sSfL {{ . }} | bash
end
{{ end -}}

log info "=== SECONDARY INSTALLATION SCRIPTS COMPLETED ==="

asdf reshim

log info "=== RUNNING PYTHON SCRIPTS ==="

{{ range .packages.python_scripts -}}
log info "Running script {{ . }}"
curl --proto '=https' --tlsv1.2 -sSfL {{ . }} | python3 -
{{ end -}}

log info "=== PYTHON SCRIPTS COMPLETED ==="

asdf reshim

log info "=== INSTALLING GO PACKAGES ==="

{{ range .packages.gopkgs -}}
run_cmd go install {{ . | quote }}
{{ end -}}

log info "=== GO PACKAGES INSTALLED ==="

asdf reshim

function _test_var -a var -a val
    if test -z $val
        log error "No version set for $var in $(pwd)"
        return 1
    end
end

log info "=== CONFIGURING NEOVIM ==="

set -g _python_path (asdf which python)
_test_var Python $_python_path
set -g _pip_path (asdf which pip)
_test_var pip $_pip_path
set -g _ruby_path (which ruby)
_test_var Ruby $_ruby_path
set -g _node_path (asdf which node)
_test_var Node $_node_path
set -g _perl_path (asdf which perl)
_test_var Perl $_perl_path
set -g _npm_path (asdf which npm)
_test_var NPM $_npm_path
set -g _cpan_path (asdf which cpan)
_test_var Cpan $_cpan_path
set -g _gem_path (which gem)
_test_var gem $_gem_path
set -g _go_path (asdf which go)
_test_var Go $_go_path
set -g _go_mod_path (path normalize $_go_path/../../../bin)

eval "$_npm_path i -g neovim"

if not test -e $HOME/.asdf/shims/cpanm
    log trace "running command: $_cpan_path App::cpanminus"
    eval "echo 'yes' | $_cpan_path App::cpanminus"
    run_cmd asdf reshim
    set _cpanm_path (asdf which cpanm)
    run_cmd $_cpanm_path Neovim::Ext
    run_cmd asdf reshim
end

run_cmd $_python_path -m pip install --upgrade pip
run_cmd $_python_path -m pip install pynvim hererocks
run_cmd $_python_path -m pip install --upgrade pynvim hererocks

run_cmd $_gem_path install neovim

function neovim_confirm_prompt
    function host_prog -a prog prog_path mgr mgr_path
        set version (eval "$prog_path --version")
        set_color --bold magenta
        echo -n "$prog: "
        set_color --dim --italics white
        echo "$prog_path"
        set_color --bold white
        echo -n "  $mgr: "
        set_color --dim --italics white
        echo "$mgr_path"
        set_color normal
    end
    set_color --bold cyan
    echo "Neovim is configured with the following paths:"
    host_prog Python $_python_path pip $_pip_path
    host_prog Ruby $_ruby_path gem $_gem_path
    host_prog "Node.js" $_node_path NPM $_npm_path
    host_prog Perl $_perl_path Cpan $_cpan_path
    host_prog Go $_go_path go-mod $_go_mod_path
    echo
    set_color --bold cyan
    echo "Would you like to continue?"
    set_color --bold white
    echo -n "[y]es/[n]o: "
    set_color normal
end

function neovim_continue
    read --global --prompt neovim_confirm_prompt --nchars 1 neovim_confirm
    switch $neovim_confirm
        case Y y
            echo "Continuing with Neovim configuration..."
        case N n
            echo "Exiting Neovim configuration."
            return 1
        case '*'
            echo "Invalid input. Please enter 'y' or 'n'."
            neovim_continue
    end
end

function neovim_reset_prompt
    set_color --bold cyan
    echo "Would you like to reset the Neovim configuration?"
    set_color normal
    echo "This will remove the current Neovim configuration as well as all the"
    echo "cached plugins and settings. You will need to reinstall all plugins"
    echo "after this."
    echo
    set_color --bold
    echo "You'll need to run `chezmoi apply ~/.config/nvim` after resetting."
    set_color normal
    echo
    set_color --bold cyan
    echo "Would you like to reset?"
    set_color --bold white
    echo -n "[y]es/[n]o: "
    set_color normal
end

function neovim_reset
    read --global --prompt neovim_reset_prompt --nchars 1 neovim_reset_confirm
    switch $neovim_reset_confirm
        case Y y
            log info "Resetting Neovim configuration..."
            for nvim_path in "$HOME/.local/share/nvim" "$HOME/.local/state/nvim" "$HOME/.cache/nvim" "$HOME/.config/nvim"
                if test -d $nvim_path
                    run_cmd rm -rf $nvim_path
                else
                    log warn "Directory $nvim_path does not exist, skipping."
                end
            end
            mkdir -p $HOME/.config/nvim/lua
        case N n
            echo "Skipping Neovim reset."
        case '*'
            echo "Invalid input. Please enter 'y' or 'n'."
            neovim_reset
    end
end

neovim_continue
neovim_reset

run_cmd rm -f ~/.config/nvim/lua/options.lua
begin
    echo -e "vim.g.python3_host_prog = '$_python_path'"
    echo -e "vim.g.ruby_host_prog = '$_ruby_path'"
    echo -e "vim.g.node_host_prog = '$_node_path'"
    echo -e "vim.g.perl_host_prog = '$_perl_path'"
    echo -e "vim.env.PATH = '$_go_path:$_go_mod_path:' .. vim.env.PATH"
end >$HOME/.config/nvim/lua/options.lua

log info "=== NEOVIM CONFIGURED ==="

log info "========================= CONFIGURATION COMPLETE ========================="
